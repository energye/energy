//----------------------------------------
//
// Copyright Â© yanghy. All Rights Reserved.
//
// Licensed under Apache License Version 2.0, January 2004
//
// https://www.apache.org/licenses/LICENSE-2.0
//
//----------------------------------------

package wv

import (
	"encoding/json"
	"github.com/energye/energy/v3/internal/assets"
	"github.com/energye/energy/v3/internal/ipc"
	"github.com/energye/lcl/lcl"
	"github.com/energye/lcl/types"
	"github.com/energye/wv/wv"
	"sync/atomic"
)

type OnWindowCreate func(window IBrowserWindow)

// IBrowserWindow
//
//	A browser window composed of TForms and webview2 controls
type IBrowserWindow interface {
	lcl.IForm
	IsClosing() bool
	WindowParent() wv.IWVWindowParent
	Browser() wv.IWVBrowser
	// SetOnBrowserAfterCreated Called after a new browser is created and it's ready to navigate to the default URL.
	SetOnBrowserAfterCreated(fn wv.TNotifyEvent)
	// SetOnBrowserMessageReceived
	//  runs when the `ICoreWebView2Settings.IsWebMessageEnabled`
	//	setting is set and the top-level document of the WebView runs `window.chrome.webview.postMessage`.
	SetOnBrowserMessageReceived(fn wv.TOnWebMessageReceivedEvent)
	SetOnShow(fn wv.TNotifyEvent)
	SetOnClose(fn lcl.TCloseEvent)
}

// BrowserWindow
//
//	energy webview2 window, It consists of TForm and WVBrowser
type BrowserWindow struct {
	lcl.TForm
	windowId                   uint32
	isClosing                  bool
	windowParent               wv.IWVWindowParent
	browser                    wv.IWVBrowser
	options                    Options
	onWindowCreate             OnWindowCreate
	onAfterCreated             wv.TNotifyEvent
	onWebMessageReceived       wv.TOnWebMessageReceivedEvent
	onContextMenuRequested     wv.TOnContextMenuRequestedEvent
	onShow                     wv.TNotifyEvent
	onClose                    lcl.TCloseEvent
	ipcMessageReceivedDelegate ipc.IMessageReceivedDelegate
}

var windowID uint32

func getWindowID() uint32 {
	atomic.AddUint32(&windowID, 1)
	return windowID
}

// FormCreate
// The function called when creating a window
// Initialize window properties or other tasks here
func (m *BrowserWindow) FormCreate(sender lcl.IObject) {
	m.windowId = getWindowID()
	m.SetCaption(m.options.Caption)
	m.SetLeft(int32(m.options.X))
	m.SetTop(int32(m.options.Y))
	m.SetWidth(int32(m.options.Width))
	m.SetHeight(int32(m.options.Height))
	m.SetDoubleBuffered(true)
	m.windowParent = wv.NewWVWindowParent(m)
	m.windowParent.SetParent(m)
	m.windowParent.SetAlign(types.AlClient)
	m.browser = wv.NewWVBrowser(m)
	m.windowParent.SetBrowser(m.browser)
	if m.options.DefaultURL != "" {
		m.browser.SetDefaultURL(m.options.DefaultURL)
	}
	if m.options.ICON == nil {
		lcl.Application.Icon().LoadFromBytes(assets.ICON.ICO())
	} else {
		lcl.Application.Icon().LoadFromBytes(m.options.ICON)
	}
	// Registers the current window to the process message for future use when the specified window handles the message
	ipc.RegisterProcessMessage(m)
	ipc.SetMainWindowId(m.WindowId())
	// BrowserWindow Default preset function implementation
	m.defaultEvent()
	// call window main form create callback
	if m.onWindowCreate != nil {
		m.onWindowCreate(m)
	}
}

// WindowId Window ID, generated by accumulating sequence numbers
func (m *BrowserWindow) WindowId() uint32 {
	return m.windowId
}

func (m *BrowserWindow) SendMessage(payload []byte) {
	if m.IsClosing() {
		return
	}
	m.browser.PostWebMessageAsString(string(payload))
}

// Default preset function implementation
//
//	Users have two options when implementing event behavior on their own
//	1. Use Browser() to obtain the browser object and remove and override the current specified event
//	2. Specify the event function in the current window and retain the default event behavior
func (m *BrowserWindow) defaultEvent() {
	// ipc message received
	m.ipcMessageReceivedDelegate = ipc.NewMessageReceivedDelegate()
	// webview2 AfterCreated
	m.browser.SetOnAfterCreated(func(sender lcl.IObject) {
		m.windowParent.UpdateSize()
		// local load
		if m.options.LocalLoad != nil {
			m.browser.AddWebResourceRequestedFilter(m.options.LocalLoad.Scheme+"*", wv.COREWEBVIEW2_WEB_RESOURCE_CONTEXT_ALL)
		}
		// current browser ipc javascript
		m.browser.CoreWebView2().AddScriptToExecuteOnDocumentCreated(string(ipcJS), m.browser)
		// CoreWebView2Settings
		settings := m.browser.CoreWebView2Settings()
		// Global control of devtools account open and clos
		settings.SetAreDevToolsEnabled(!m.options.DisableDevTools)
		if m.onAfterCreated != nil {
			m.onAfterCreated(sender)
		}
	})
	m.browser.SetOnNavigationStarting(func(sender wv.IObject, webview wv.ICoreWebView2, args wv.ICoreWebView2NavigationStartingEventArgs) {
		jsCode := `
window.energy.drag().enableDrag(true);
window.energy.drag().setup();
`

		m.browser.ExecuteScript(jsCode, 0)
	})
	// context menu
	m.browser.SetOnContextMenuRequested(func(sender wv.IObject, webview wv.ICoreWebView2, args wv.ICoreWebView2ContextMenuRequestedEventArgs) {
		if m.options.DisableContextMenu {
			args = wv.NewCoreWebView2ContextMenuRequestedEventArgs(args)
			menuItemCollection := wv.NewCoreWebView2ContextMenuItemCollection(args.MenuItems())
			menuItemCollection.RemoveAllMenuItems()
			menuItemCollection.Free()
			args.Free()
		} else if m.onContextMenuRequested != nil {
			m.onContextMenuRequested(sender, webview, args)
		}
	})
	// process message received
	m.browser.SetOnWebMessageReceived(func(sender wv.IObject, webview wv.ICoreWebView2, args wv.ICoreWebView2WebMessageReceivedEventArgs) {
		var flag bool
		if m.ipcMessageReceivedDelegate != nil {
			args = wv.NewCoreWebView2WebMessageReceivedEventArgs(args)
			message := args.WebMessageAsString()
			args.Free()
			var pMessage ipc.ProcessMessage
			err := json.Unmarshal([]byte(message), &pMessage)
			if err == nil {
				flag = m.ipcMessageReceivedDelegate.Received(m.WindowId(), &pMessage)
			}
		}
		if !flag {
			if m.onWebMessageReceived != nil {
				m.onWebMessageReceived(sender, webview, args)
			}
		}
	})
	// window, OnShow
	m.TForm.SetOnShow(func(sender lcl.IObject) {
		if application.InitializationError() {
			// Log ???
		} else {
			if application.Initialized() {
				m.browser.CreateBrowser(m.windowParent.Handle(), true)
			}
		}
		if m.onShow != nil {
			m.onShow(sender)
		}
	})
	// window, OnClose
	m.TForm.SetOnClose(func(sender lcl.IObject, action *types.TCloseAction) {
		if m.onClose != nil {
			m.onClose(sender, action)
		}
		// window close and free
		if *action == types.CaFree {
			m.isClosing = true
			// cancel process message
			ipc.UnRegisterProcessMessage(m)
		}
	})
}

func (m *BrowserWindow) IsClosing() bool {
	return m.isClosing
}

func (m *BrowserWindow) WindowParent() wv.IWVWindowParent {
	return m.windowParent
}

func (m *BrowserWindow) Browser() wv.IWVBrowser {
	return m.browser
}

func (m *BrowserWindow) SetOnShow(fn wv.TNotifyEvent) {
	m.onShow = fn
}

func (m *BrowserWindow) SetOnClose(fn lcl.TCloseEvent) {
	m.onClose = fn
}

func (m *BrowserWindow) SetOnBrowserAfterCreated(fn wv.TNotifyEvent) {
	m.onAfterCreated = fn
}

func (m *BrowserWindow) SetOnBrowserMessageReceived(fn wv.TOnWebMessageReceivedEvent) {
	m.onWebMessageReceived = fn
}
