// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package assets generated by go-bindata.
// sources:
// resources/icon.png
// resources/icon_red.png
// resources/index.html
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

type assetFile struct {
	*bytes.Reader
	name            string
	childInfos      []os.FileInfo
	childInfoOffset int
}

type assetOperator struct{}

var __assetsFile__ = &assetOperator{}

// Open implement http.FileSystem interface
func (f *assetOperator) Open(name string) (http.File, error) {
	var err error
	if len(name) > 0 && name[0] == '/' {
		name = name[1:]
	}
	content, err := Asset(name)
	if err == nil {
		return &assetFile{name: name, Reader: bytes.NewReader(content)}, nil
	}
	children, err := AssetDir(name)
	if err == nil {
		childInfos := make([]os.FileInfo, 0, len(children))
		for _, child := range children {
			childPath := filepath.Join(name, child)
			info, errInfo := AssetInfo(filepath.Join(name, child))
			if errInfo == nil {
				childInfos = append(childInfos, info)
			} else {
				childInfos = append(childInfos, newDirFileInfo(childPath))
			}
		}
		return &assetFile{name: name, childInfos: childInfos}, nil
	} else {
		// If the error is not found, return an error that will
		// result in a 404 error. Otherwise the server returns
		// a 500 error for files not found.
		if strings.Contains(err.Error(), "not found") {
			return nil, os.ErrNotExist
		}
		return nil, err
	}
}

func (f *assetOperator) ReadFile(name string) ([]byte, error) {
	return Asset(name)
}

// Close no need do anything
func (f *assetFile) Close() error {
	return nil
}

// Readdir read dir's children file info
func (f *assetFile) Readdir(count int) ([]os.FileInfo, error) {
	if len(f.childInfos) == 0 {
		return nil, os.ErrNotExist
	}
	if count <= 0 {
		return f.childInfos, nil
	}
	if f.childInfoOffset+count > len(f.childInfos) {
		count = len(f.childInfos) - f.childInfoOffset
	}
	offset := f.childInfoOffset
	f.childInfoOffset += count
	return f.childInfos[offset : offset+count], nil
}

// Stat read file info from asset item
func (f *assetFile) Stat() (os.FileInfo, error) {
	if len(f.childInfos) != 0 {
		return newDirFileInfo(f.name), nil
	}
	return AssetInfo(f.name)
}

// newDirFileInfo return default dir file info
func newDirFileInfo(name string) os.FileInfo {
	return &bindataFileInfo{
		name:    name,
		size:    0,
		mode:    os.FileMode(2147484068), // equal os.FileMode(0644)|os.ModeDir
		modTime: time.Time{}}
}

// AssetFile return a http.FileSystem instance that data backend by asset
func AssetFile() *assetOperator {
	return __assetsFile__
}

var _resourcesIconPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x2e\x02\xd1\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7\x6f\xa8\x64\x00\x00\x01\xc3\x49\x44\x41\x54\x38\x4f\x95\x93\x41\x4f\x13\x41\x14\xc7\x7f\xd3\x96\xb6\x4b\x59\x6b\xb1\x09\x88\x9a\x90\x78\xf1\xa4\x9f\xc0\xc4\x83\x1f\x82\x44\x3d\x78\xf1\xc0\x89\x2b\x21\x78\xf3\xe6\x85\x68\xbc\xe8\x15\xd3\x2f\xe0\xdd\x93\x67\x43\x24\x98\x18\x35\x72\x80\x44\xd3\xd8\xb2\x2d\x0b\x2d\xdd\xe1\x3f\xbb\x4b\xd7\x95\x9a\xc8\x2f\xd9\x9d\xc9\xcc\x7b\x6f\xde\xbc\xff\x1b\xc6\xb4\x82\xa9\x74\x76\x21\x4c\x3a\xc2\xb3\xf7\x96\xe6\x75\xa8\x35\xe0\xd7\x2e\xf4\x3b\xb0\x78\x1b\xba\x3f\x61\xba\x4e\xc5\x56\x19\x96\x8b\x18\x0b\xa3\x47\xf5\xb2\x3c\x86\xce\xad\xe0\x7e\x31\x6b\xf7\x0c\xc7\x21\xf4\x7e\xc3\x89\xf6\xae\xdd\x92\xe5\x09\xc8\x81\xb0\x07\xd1\x08\xaf\x1b\x12\x95\x0c\xd5\xe7\x3b\x83\xc4\xe9\x6f\x5e\x6e\x5b\xde\x76\x2d\xeb\xef\x9c\xdb\x44\xbc\x57\xfb\xb6\xb0\x29\x9b\x94\x2c\x03\x47\x63\x41\x27\x46\xe0\xcf\xa6\x0b\xe7\x09\x97\xaf\x9a\xe8\x41\x7d\x7c\xf5\x2c\x40\x2b\x28\x52\x2c\x11\x7f\x53\xd5\x74\x31\xe5\xcd\xae\xe5\xc5\xa7\x89\x59\x65\x01\x96\xfc\x51\x3c\x5a\xd9\x1d\x1f\xc6\xd3\x98\x56\xe0\x13\xa9\x16\x65\x2f\x5d\xc8\x93\xa9\xe0\xd8\xec\x58\xfa\x2a\x62\xed\x72\x72\x95\x8e\x14\xa8\xd5\xa1\x24\x85\xdb\x7b\xb0\x72\x27\x6f\x2f\xf2\x35\x18\x1e\x49\x01\x15\xf8\xf3\x07\x78\x78\xc5\x48\x56\x8f\xc7\x0b\x86\x6f\x1f\x25\xed\x8f\xd4\x28\x4f\x3e\x40\x18\x48\x73\x9d\xee\x32\x70\x2c\xf9\x8a\x28\x8c\x0e\x9e\x51\x7f\x4c\x20\x1f\xa0\xa4\x02\x56\x74\x57\xd7\x0b\x7f\xf2\xf4\xbe\x61\xf5\xee\xb9\xf4\x1d\xf9\x00\x95\x5a\x32\x36\xe6\x92\xf1\x3f\xc8\x07\xe8\xa9\x7d\x5d\x17\x16\x94\xc9\xbf\xd8\xd8\xb2\xbc\xfe\x3e\x96\x34\x4b\xcb\x3d\xa6\x5e\x7b\x80\x77\x09\xf6\xbf\xaa\x8d\x15\xc8\x6f\xc2\x81\x94\x70\x2d\xde\xbc\x01\xd5\x69\x18\xa8\x2c\x45\x3d\x85\x27\x8b\xb1\x6f\x92\x41\x2b\x98\xe1\xa8\x3f\x88\x4f\x0e\xda\x30\xab\x8e\x9c\xbf\x09\x87\xca\xa8\xdf\x55\x6d\xe4\xe0\xfa\xe3\x40\x7b\x7b\x5f\xce\x9c\x27\xd6\xe4\x82\xc0\x29\x77\xec\x88\xcd\x27\x47\x15\x67\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xc6\x85\xaa\x1f\x2e\x02\x00\x00")

func resourcesIconPngBytes() ([]byte, error) {
	return bindataRead(
		_resourcesIconPng,
		"resources/icon.png",
	)
}

func resourcesIconPng() (*asset, error) {
	bytes, err := resourcesIconPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/icon.png", size: 558, mode: os.FileMode(438), modTime: time.Unix(1702887695, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesIcon_redPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\x77\x02\x88\xfd\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xff\x61\x00\x00\x00\x01\x73\x52\x47\x42\x00\xae\xce\x1c\xe9\x00\x00\x00\x04\x67\x41\x4d\x41\x00\x00\xb1\x8f\x0b\xfc\x61\x05\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7\x6f\xa8\x64\x00\x00\x02\x0c\x49\x44\x41\x54\x38\x4f\x95\x93\xcf\x4f\x13\x41\x14\xc7\xbf\xbb\xdb\x6d\xbb\xdd\xb5\xc5\xd5\x54\x52\xaa\xd2\xd2\x03\xd6\x62\x8d\x4d\x90\x60\x48\xe0\x20\xa1\x07\xee\x5e\xf5\xe2\x1f\xe0\xc9\x9b\xfe\x09\xf2\x07\x78\xd3\x70\xe1\x42\x52\xe3\x4d\x83\x41\x6b\xe4\x87\x24\x60\x1a\x89\x1a\x6a\xa9\x4d\x14\xca\x76\x4b\xd9\xb6\x94\x71\x16\x86\x6d\xc6\x02\x89\x9f\x64\x77\x66\xbf\xf3\xde\xdb\x37\xf3\xe6\xc1\x61\xda\x94\xd9\xac\x83\x3f\xe1\x98\x87\x4d\x3b\x10\xd8\x88\xb7\x37\xc7\x48\x77\xad\x02\x65\xbf\x81\x92\xda\x85\xee\x6a\x19\x99\x81\x31\x04\xcb\xbf\x30\x58\xc8\x61\x4b\xd5\x51\x97\x65\x94\x95\x2e\xa4\xdf\xcf\xb8\xa9\x4b\xd3\xf6\x13\xed\x97\xcd\xe8\xe7\x37\x42\xee\xe2\x15\xd4\x64\x0f\x96\x2e\xf5\xc1\xf4\xaa\x18\xfe\xbe\x0c\x4b\x72\xa3\x29\xb9\x50\xa1\xdf\xf9\x40\x08\xd1\xad\x3c\x16\x12\x23\x0d\xe6\xc6\x93\x19\x9a\x24\x85\xde\x38\xf9\x14\x1f\x22\x4c\xea\x60\x2e\x35\x41\xe6\x53\xe3\xce\xba\xb3\x05\x9b\x1f\x7d\x49\xa2\x35\x6a\x30\xdc\x3e\xc4\xbe\xad\x70\x6b\xa7\xe1\x6c\x81\x1e\xa2\x94\x8d\xde\xc2\x81\x20\x40\x26\x2d\x26\x1e\xf1\x31\x39\x4a\x32\xb7\x27\x4f\xcc\xaa\x1d\xe0\xde\xb9\xd6\x8e\xcf\x8f\x92\x3f\x88\xba\xe8\x62\x22\x65\x6a\xdd\x2f\xd1\x80\x32\x0e\x98\xc0\xd3\x0e\x40\x69\xd1\x1d\xd5\x45\x11\xe7\xeb\xbb\x58\xb9\x7e\x87\x6c\x5e\xbd\x46\x5e\xbf\x7c\x64\x6c\xe8\x61\xfc\xd4\x74\x66\xc5\xc3\x05\xd0\xac\x2a\x9a\xf4\xef\x15\xd9\x8b\xe4\xda\xbc\xd0\xf3\xe4\x95\x32\x91\x9d\x15\x6e\x14\xbe\x60\x38\xbf\xca\xac\x78\xb8\x00\xea\x5e\x05\x11\x5a\x77\xc3\xab\x1d\x09\xf7\x23\x96\x3d\x2c\x06\x23\x98\x8d\x0d\x1e\x4a\x67\xf2\x7c\xfc\x01\x59\xa3\x25\x7c\x37\x30\x72\x6a\x19\xff\x85\xcb\x20\x54\xdd\x46\x80\x66\xe1\x12\x38\xf9\x4c\x38\xcb\x44\xf1\x2b\x4c\x8f\x06\x5f\xf3\x30\xf3\x13\x79\x96\x7e\x48\x36\xa2\x09\x27\xc3\x76\xbd\x68\x33\xcd\xbc\x78\x8c\x74\xee\x03\x16\xc3\xfd\x98\xf3\xa8\xc4\x72\x2b\x28\x2a\x1a\x62\xdb\x45\x58\xf4\x5c\xb2\xbd\x49\x04\x7f\xe7\x69\x3f\x04\x98\xd3\xf1\x4d\x9c\x36\xb5\xd5\xa7\x77\x4d\x7d\xcf\xc0\x42\xa8\x9f\xe6\x25\xe1\x42\xcd\xc0\x2e\x2d\xe9\x92\xde\x03\x91\x56\x66\x9f\xf6\x42\x6a\x33\x87\xcb\x3b\x25\xc4\xd7\x97\x6d\x3f\xfb\x69\x9f\x15\x6d\x59\xbb\xc3\xfe\x13\xe0\x2f\x9b\x23\xa7\xe4\x01\x51\x0a\x6b\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xdd\xf9\xe2\xc3\x77\x02\x00\x00")

func resourcesIcon_redPngBytes() ([]byte, error) {
	return bindataRead(
		_resourcesIcon_redPng,
		"resources/icon_red.png",
	)
}

func resourcesIcon_redPng() (*asset, error) {
	bytes, err := resourcesIcon_redPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/icon_red.png", size: 631, mode: os.FileMode(438), modTime: time.Unix(1704553903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resourcesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6f\x6f\xdb\xc6\x19\x7f\x1f\x20\xdf\xe1\xd9\x65\x80\x6c\xd4\x24\x25\xca\x49\x3b\x4a\x14\x36\x2c\x1e\xd0\x57\x1d\xd0\xa4\xc3\x10\xe4\xc5\x89\x7c\x24\x5d\x7c\xbc\x23\x78\x47\x5b\x5e\x60\xc0\x18\xd6\x35\xc5\x32\x64\xc0\x80\x66\x1b\xb2\x36\xeb\x5a\x74\x28\x36\x2c\xc3\x5e\xac\xcb\xf6\x71\x4a\x67\xfe\x16\x03\x49\x51\xa2\x24\x52\x96\x66\x37\x59\xf8\xc2\x36\xef\x9e\xfb\x3d\xbf\x7b\xfe\xdd\x73\x74\xf7\x5b\x37\xdf\xf9\xfe\xad\x1f\xff\x70\x0f\x46\x3a\xe0\xbd\xab\x57\xba\xd3\xdf\x48\xfd\xde\xd5\x2b\x00\x00\xdd\x00\x35\x05\x6f\x44\x23\x85\xda\x25\xb7\x6f\xfd\xc0\x78\x8b\x14\x73\x9c\x89\x7d\x88\x90\xbb\x44\xe9\x23\x8e\x6a\x84\xa8\x09\x8c\x22\x1c\xb8\x64\xa4\x75\xa8\x1c\xcb\xf2\x7c\x71\x4f\x99\x1e\x97\xb1\x3f\xe0\x34\x42\xd3\x93\x81\x45\xef\xd1\xb1\xc5\x59\x5f\x59\xc8\x31\x40\xa1\x8d\x98\x59\xb6\xd9\xba\x6e\xb6\xda\x96\x1e\x61\x80\x86\x37\xa2\x7c\xdf\x62\xc2\xc7\xb1\xe9\x29\x35\xd5\xa9\xbc\x88\x85\x1a\x54\xe4\xad\xad\xe3\x20\x46\xcb\x36\xdf\x34\xbf\x93\xfe\x65\x06\x4c\x98\xf7\x14\xe9\x75\xad\x1c\xea\x02\xc0\x15\xe4\x73\xc2\x0b\xf8\x5d\x6b\x62\xd1\x6e\x5f\xfa\x47\x90\x19\xcb\x25\xf2\x00\xa3\x01\x97\x87\x0e\x8c\x98\xef\xa3\xe8\x04\x34\x1a\x32\xe1\x40\x33\x1c\x77\x42\xea\xfb\x4c\x0c\xf3\x97\x74\xf3\x5d\x9f\x1d\x00\xf3\x5d\x42\xc3\x90\xc0\x81\xe1\x71\x49\xf7\x0b\xee\xc8\x0d\x4f\x0a\x4d\x99\xc0\xa8\x80\x1f\x21\x1b\x8e\xb4\x03\xad\x66\xf3\x60\xd4\x81\xbe\x8c\x7c\x8c\x1c\x68\x85\x63\x50\x92\x33\x1f\xae\x21\x62\x61\xd6\x02\x85\x2a\xe6\x23\x1c\x32\x5f\x8f\x5c\x62\x37\x9b\xe1\x98\x14\x78\x7d\xea\xed\x0f\x23\x19\x0b\xdf\xf0\x24\x97\x91\x03\xd1\xb0\xbf\x65\xb7\xdf\xda\x01\x7b\xb7\x95\xfe\xb8\xb1\x5d\x86\x2b\x20\x03\x14\x31\x38\x3e\x0e\x68\xcc\xb5\x21\x43\x14\xe8\x2b\x97\xdc\x69\xb4\x1a\x3b\xd0\x68\x37\xee\x2e\x2e\x2a\x16\xaa\xb8\x9f\xad\xcd\x4c\xea\x92\x56\x95\x5c\x26\xab\x31\x08\x39\xd5\x08\x8a\x4b\xed\x12\xcd\x34\x47\xd2\xeb\x32\xf0\x38\x55\xca\x25\xc8\x0d\xe6\x49\x61\x04\xa8\x14\x1d\xa6\x53\x16\xeb\x25\x7f\xfd\xf7\x7f\x1e\x7c\xf9\xf5\x57\x27\x5d\xab\x58\x5f\x87\x3f\xd9\x84\xc1\x34\x06\x46\x6a\x82\xb0\x46\x72\x05\x9b\xe4\xc1\xcf\x5f\xfc\xeb\x67\xeb\xa8\x5b\x52\x39\x35\x80\xd1\x22\xbd\xb3\x93\x0f\xcf\xfe\xf0\xcf\x56\xd7\x2a\x4b\x6c\x8e\x64\x17\x48\xf6\x5a\x48\xf3\x42\x2b\x6d\x50\x61\x2d\xc8\x6c\xe0\x92\xdc\x06\x76\x9d\x1f\x57\xd0\x6d\x17\x74\xdb\xdf\x04\xdd\xc5\x40\x33\x76\x57\x52\xac\x76\x70\xce\x6f\xf7\x22\xee\xdd\x9d\x39\x78\xd7\x58\xcf\xc5\x99\xd0\x84\x7f\x55\x1a\x9d\x33\xbd\xbc\xf9\x5a\xef\x6c\x90\x65\x22\x9e\x4b\xb1\xe7\x0f\x5f\x9b\x14\xb3\x2f\x2d\xc5\xec\xd7\x2b\xc5\xec\x97\x9b\x62\xf6\xab\x49\x31\xfb\xff\x22\xc5\xda\x17\x4e\x31\x85\x5a\x33\x31\x9c\x3f\xc8\x3e\x7c\x6d\xb2\xac\x7d\x69\x59\xd6\x7e\xbd\xb2\xac\xfd\x72\xb3\xac\xfd\x6a\xb2\xac\xfd\x72\xb3\x6c\x0a\x5f\x6e\x65\xad\xa2\x97\xed\x5d\xbd\x32\xdf\xe1\x4e\xfb\xe4\x8a\x56\x35\xed\xd2\x67\x0d\xf4\x40\x0a\x6d\x28\xf6\x13\x74\xa0\x65\x87\xe3\x8e\x71\x88\xfd\x7d\xa6\x0d\x1a\x86\x46\x84\x43\x26\x85\x03\x7e\x44\x87\x1d\x28\x66\x62\x85\x91\xa1\x90\xa3\xa7\x1d\x10\x52\x60\xa7\xb2\xb7\x4d\x3b\xf9\x89\x8e\xac\xd3\x76\xe0\xc6\xf5\xb4\xcd\x1f\x70\x49\xb5\x03\x1c\x07\xba\x5e\x59\x6d\xf1\x28\xa1\x96\x80\xd2\xf2\x11\x0c\xf3\x5b\x4d\x5a\x3b\xcc\x50\x0c\xa7\x2d\x7d\x7e\xe1\x30\xb4\x0c\xd3\x6b\xc2\xaa\x2d\x12\xc8\xaf\x13\x2e\xd9\x6d\x12\xab\xd7\xb5\x7c\x76\xb0\x0e\x91\x05\x13\x66\xef\x87\x93\x8b\x49\x5f\x72\xbf\x43\x7a\x2f\xbe\x7c\x9c\x3c\xfa\xe3\xe9\xd3\x0f\xce\x3e\xfd\xcd\xe9\xd3\x47\xf0\xde\xed\x3d\x78\x03\xf6\xf2\xab\xd5\xed\xb7\xa1\xab\x42\x2a\x0a\xc0\xc9\xcd\x63\x18\x21\x8a\x55\x36\x02\xb8\x7f\x5f\xaa\xb7\xc5\x40\x1e\x1f\x77\xad\x14\xa1\x36\xee\xaa\x77\x52\x3b\x5e\xda\x9d\xc6\xb1\x36\x28\x67\x43\xe1\x40\x94\xee\xa9\xde\x39\xc8\x0d\x3f\x92\xa1\x2f\x0f\xa7\x5b\xa9\x62\x2f\xa4\xb1\xd2\xc9\x19\x56\xed\x71\xb0\xe0\xd6\x68\x72\xff\xbb\x1e\x8e\xf3\x93\x62\x75\x1e\x17\xfc\xf2\x0b\x5b\x5e\x12\x8a\xb1\x55\x7c\x96\xd6\x67\x59\x7e\xfa\xc9\xe7\x2f\x9e\xfc\x22\xcb\xc3\xf9\x89\x8d\x81\x3e\x7a\x96\x7c\xfa\xf1\x25\x00\x25\x0f\x9e\x9e\xfd\xf6\xb3\x8d\x80\xe6\x85\x6b\x4a\xd3\x54\xb8\x1c\xa7\xab\x9d\xbb\x27\x30\x1a\x1e\x9d\x13\x97\x25\xd5\x75\x32\xeb\x6a\x5c\x3f\x50\x0b\xd3\xf5\x63\xad\xa5\x80\x34\x75\x5d\x12\x30\xc1\x08\x64\x57\x7f\xf8\xae\xc7\x99\xb7\xef\x92\x41\xcc\xf9\xbb\x5e\x9a\x86\xa4\x97\xbc\xff\xa7\xe4\x6f\x8f\xac\xb3\x93\x93\xe4\x83\xe7\xf9\x4b\x46\x3f\x07\xb9\xa8\xa6\x80\x89\x1f\x31\xe1\xcb\x43\xd2\x3b\x7d\x72\x92\x3c\x7b\x94\x3c\xfc\xe8\x32\xe1\xe9\xb8\x0c\xff\xd9\x17\x97\x0b\xef\x71\xa9\xb0\x50\x90\xbc\xff\xf7\xb3\xc7\x7f\x59\x03\xbd\x36\x34\xaa\xca\x52\x86\x97\x1f\x5d\x73\xa7\x5d\xc1\x31\xa0\xac\x12\x0a\xb9\xa1\x69\x9f\x23\x38\x3e\xd5\xd4\x25\xd9\xcb\x4d\xaa\xe9\xaa\x2a\x96\x09\x19\x9e\xe4\x71\x20\x20\x8c\x64\xe8\x12\x9f\x6a\x24\xc0\x69\x1f\xb9\x4b\x4e\x1f\x7f\x7e\xfa\xe4\x13\x52\x7c\x42\x6a\xed\x36\x6b\xd1\xac\x05\xb8\xcd\xb4\x0a\x1a\xcc\xb4\x26\x5f\xfc\x3a\xf9\xd5\x2f\x67\x5a\xed\x6f\x4a\x2b\xf5\xfd\x08\x95\x9a\x29\x7e\xf2\x2c\xf9\xfd\xc9\x45\x94\xcd\x64\x2a\xfb\x9a\x79\xdf\x65\x63\x8b\x1d\xcc\xd2\x60\x11\x24\xdd\xac\x34\x4c\xa4\xcc\x59\x7f\x73\x7f\x06\xb8\xfc\x51\xef\xda\xde\xee\xde\x9b\x7b\x37\x3b\x33\x99\x62\xa2\xdd\x6e\x97\x46\x39\x13\x68\x14\xdf\x18\x6f\xa4\xcd\x43\x3e\x77\x5c\x84\xa0\x39\xfd\x9c\x78\x7f\x15\x56\x26\xdf\xb5\x0a\xaa\x5d\xab\x2f\xfd\xa3\x8c\x7c\xf9\xeb\xac\xc0\x43\x78\x2f\xc6\xad\x12\x14\x72\x07\x1a\xd7\x68\x18\x36\x76\x66\x83\x69\x24\x6f\x6d\x97\x35\xa6\x4f\x84\x3a\x8e\xc4\xe2\x68\xfa\x4c\x63\xde\x81\x3b\x77\x77\x96\xe7\xf3\x1e\xc2\x01\x42\xe6\xe7\x8e\x67\xaf\xc7\xa5\x65\x81\x8c\x85\x46\xdf\x81\x41\x2c\x3c\xcd\xa4\x80\x65\x32\x7a\xc4\x94\xf9\x6d\x81\x63\x7d\x8b\x79\xfb\x5b\x2b\x24\xa7\xd2\x4c\x30\x7d\xab\x60\xba\xb5\xbd\x2c\xc5\x51\xc3\x41\x00\x6e\x26\xde\x59\x9e\x67\xa1\x67\x62\xc0\xf4\x56\x43\x2a\x83\x89\x81\x6c\xec\xa4\xfb\x2d\xd1\x8c\x50\xc5\x5c\x57\x52\x80\xcc\x6f\x42\x49\x8e\x26\x97\xc3\x2d\x32\xc1\x20\x3b\x30\x59\x55\xbd\xe6\x20\x30\x73\xf3\x81\x0b\xe4\x9d\x77\x1d\x20\xf0\xc6\x64\xc5\xf2\x82\xe3\xed\x05\xda\xc7\xdb\x35\x26\x46\x3d\x92\xbe\x72\x16\x99\xce\xd9\x68\xa5\x03\x8a\xfd\x68\xc8\x6e\x2d\x6e\xdd\x9e\xd3\xba\xe6\x40\xc3\x6e\xda\xb6\xd1\xb4\x0d\xdb\x6e\x54\x04\x48\xfa\xa4\xa5\xc8\x81\x06\x66\xa7\x7a\x9d\xd0\xa4\x72\x38\xd0\x48\x1e\x3e\xfe\xfa\xf9\x9f\x93\xaf\x7e\x7a\x76\xf2\xbb\xe4\x1f\x1f\x27\x0f\x9f\x37\x2a\xec\x51\xe1\xc5\x2c\x16\xa6\x11\x0b\x2e\x7c\x2f\x8a\xe8\xd1\x96\xdd\x6c\x6e\x9b\x03\xc6\xf9\x56\xba\x9f\x05\x67\x1c\x2f\xd0\x99\x9d\xdb\x6b\xd9\xa8\xf0\x79\xa3\xe2\x8c\x6f\x2c\xba\x0c\xca\x91\x46\x0e\xb3\x43\xcf\x50\x3a\x3d\x1e\x76\xe0\x4e\xfb\xee\x39\xd4\xa6\x07\xfd\x66\xcc\xa6\x4d\x41\x7e\x91\xd8\x90\x55\xf3\x5c\x56\x45\x7f\xb0\x39\xab\xac\x97\xf8\x9f\x58\xb5\xce\x63\x55\x6a\x2b\x36\xf5\x63\xda\x82\x6c\x42\x2a\x53\x45\x16\xf9\x94\x92\x73\x52\xc7\xb7\xb3\x32\x5e\xfa\x97\x97\x0e\x78\xef\xbf\x01\x00\x00\xff\xff\xc3\xfc\xf0\xa2\x64\x1c\x00\x00")

func resourcesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_resourcesIndexHtml,
		"resources/index.html",
	)
}

func resourcesIndexHtml() (*asset, error) {
	bytes, err := resourcesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/index.html", size: 7268, mode: os.FileMode(438), modTime: time.Unix(1704553903, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/icon.png":     resourcesIconPng,
	"resources/icon_red.png": resourcesIcon_redPng,
	"resources/index.html":   resourcesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"icon.png":     &bintree{resourcesIconPng, map[string]*bintree{}},
		"icon_red.png": &bintree{resourcesIcon_redPng, map[string]*bintree{}},
		"index.html":   &bintree{resourcesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
