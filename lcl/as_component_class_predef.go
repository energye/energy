//----------------------------------------
// The code is automatically generated by the generate-tool.
// Copyright © yanghy. All Rights Reserved.
//
// Licensed under Apache License 2.0
//
//----------------------------------------

package lcl

import "unsafe"

// SetObjectInstance 设置实例值, 用于外部组件创建
func SetObjectInstance(object IObject, instance unsafe.Pointer) {
	if object == nil {
		return
	}
	object.SetInstance(instance)
}

// SetUnknownInstance 设置实例值, 用于外部组件创建
func SetUnknownInstance(unknown IUnknown, instance unsafe.Pointer) {
	if unknown == nil {
		return
	}
	unknown.SetInstance(instance)
}

// AsUnknown Convert a pointer object to an existing class object
func AsUnknown(obj uintptr) IUnknown {
	instance := GetInstance(obj)
	if instance == nil {
		return nil
	}
	unknown := new(Unknown)
	SetUnknownInstance(unknown, instance)
	return unknown
}

// AsInterfacedObject Convert a pointer object to an existing class object
func AsInterfacedObject(obj uintptr) IInterfacedObject {
	instance := GetInstance(obj)
	if instance == nil {
		return nil
	}
	interfacedObject := new(TInterfacedObject)
	SetObjectInstance(interfacedObject, instance)
	return interfacedObject
}

// AsStreamAdapter Convert a pointer object to an existing class object
func AsStreamAdapter(obj uintptr) IStreamAdapter {
	instance := GetInstance(obj)
	if instance == nil {
		return nil
	}
	streamAdapter := new(TStreamAdapter)
	SetObjectInstance(streamAdapter, instance)
	return streamAdapter
}

// AsVTVirtualNodeEnumeration  Convert a pointer object to an existing class object
func AsVTVirtualNodeEnumeration(obj uintptr) IVTVirtualNodeEnumeration {
	instance := GetInstance(obj)
	if instance == nil {
		return nil
	}
	result := new(TVTVirtualNodeEnumeration)
	result.instance = instance
	return result
}

// AsDataObject Convert a pointer object to an existing class object
func AsDataObject(obj uintptr) IDataObject {
	instance := GetInstance(obj)
	if instance == nil {
		return nil
	}
	dataObject := new(DataObject)
	SetUnknownInstance(dataObject, instance)
	return dataObject
}

func AsVirtualNode(obj uintptr) IVirtualNode {
	instance := GetInstance(obj)
	if instance == nil {
		return nil
	}
	result := new(TVirtualNode)
	result.instance = instance
	return result
}
